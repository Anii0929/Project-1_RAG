#!/bin/bash
#
# Automated Fix Script
# Generated by Localhost Connection Diagnostics
#

echo "üîß Starting automated fixes..."

echo "Step 1: Fix Backend Server Process"
echo "Description: Backend server process is not running or has issues"

echo "Running: cd backend"
cd backend
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: cd backend"
else
  echo "‚úÖ Command succeeded: cd backend"
fi

echo "Running: uv sync"
uv sync
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv sync"
else
  echo "‚úÖ Command succeeded: uv sync"
fi

echo "Running: uv run uvicorn app:app --reload --port 8000 --host 0.0.0.0"
uv run uvicorn app:app --reload --port 8000 --host 0.0.0.0
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv run uvicorn app:app --reload --port 8000 --host 0.0.0.0"
else
  echo "‚úÖ Command succeeded: uv run uvicorn app:app --reload --port 8000 --host 0.0.0.0"
fi

echo "Verifying fix..."
if Check if process appears in: ps aux | grep uvicorn; then
  echo "‚úÖ Fix Backend Server Process - VERIFIED"
else
  echo "‚ùå Fix Backend Server Process - VERIFICATION FAILED"
fi

echo "---"

echo "Step 2: Fix Port Binding Issues"
echo "Description: Port conflicts or binding problems preventing server access"

echo "Running: lsof -i :8000"
lsof -i :8000
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: lsof -i :8000"
else
  echo "‚úÖ Command succeeded: lsof -i :8000"
fi

echo "Running: lsof -i :8080"
lsof -i :8080
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: lsof -i :8080"
else
  echo "‚úÖ Command succeeded: lsof -i :8080"
fi

echo "Running: sudo lsof -ti:8000 | xargs kill -9 2>/dev/null || true"
sudo lsof -ti:8000 | xargs kill -9 2>/dev/null || true
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: sudo lsof -ti:8000 | xargs kill -9 2>/dev/null || true"
else
  echo "‚úÖ Command succeeded: sudo lsof -ti:8000 | xargs kill -9 2>/dev/null || true"
fi

echo "Verifying fix..."
if netstat -an | grep LISTEN | grep 8000; then
  echo "‚úÖ Fix Port Binding Issues - VERIFIED"
else
  echo "‚ùå Fix Port Binding Issues - VERIFICATION FAILED"
fi

echo "---"

echo "Step 3: Fix Environment Configuration"
echo "Description: Environment variables or configuration files are incorrect"

echo "Running: ls -la .env"
ls -la .env
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: ls -la .env"
else
  echo "‚úÖ Command succeeded: ls -la .env"
fi

echo "Running: head -5 .env"
head -5 .env
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: head -5 .env"
else
  echo "‚úÖ Command succeeded: head -5 .env"
fi

echo "Verifying fix..."
if cd backend && uv run python -c "import os; print('API key present:', bool(os.getenv('ANTHROPIC_API_KEY')))"; then
  echo "‚úÖ Fix Environment Configuration - VERIFIED"
else
  echo "‚ùå Fix Environment Configuration - VERIFICATION FAILED"
fi

echo "---"

echo "Step 4: Fix API Endpoint Issues"
echo "Description: API endpoints not responding correctly"

echo "Running: curl -v http://127.0.0.1:8000/api/courses"
curl -v http://127.0.0.1:8000/api/courses
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: curl -v http://127.0.0.1:8000/api/courses"
else
  echo "‚úÖ Command succeeded: curl -v http://127.0.0.1:8000/api/courses"
fi

echo "Running: curl -v http://127.0.0.1:8000/docs"
curl -v http://127.0.0.1:8000/docs
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: curl -v http://127.0.0.1:8000/docs"
else
  echo "‚úÖ Command succeeded: curl -v http://127.0.0.1:8000/docs"
fi

echo "Verifying fix..."
if curl -s http://127.0.0.1:8000/api/courses | head -20; then
  echo "‚úÖ Fix API Endpoint Issues - VERIFIED"
else
  echo "‚ùå Fix API Endpoint Issues - VERIFICATION FAILED"
fi

echo "---"

echo "Step 5: Fix Frontend File Serving"
echo "Description: Frontend static files not being served correctly"

echo "Running: ls -la frontend/"
ls -la frontend/
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: ls -la frontend/"
else
  echo "‚úÖ Command succeeded: ls -la frontend/"
fi

echo "Running: curl -v http://127.0.0.1:8000/"
curl -v http://127.0.0.1:8000/
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: curl -v http://127.0.0.1:8000/"
else
  echo "‚úÖ Command succeeded: curl -v http://127.0.0.1:8000/"
fi

echo "Verifying fix..."
if curl -s http://127.0.0.1:8000/ | grep -q "Course Materials"; then
  echo "‚úÖ Fix Frontend File Serving - VERIFIED"
else
  echo "‚ùå Fix Frontend File Serving - VERIFICATION FAILED"
fi

echo "---"

echo "Step 6: Fix Python Environment"
echo "Description: Python environment or dependencies are not properly set up"

echo "Running: cd backend"
cd backend
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: cd backend"
else
  echo "‚úÖ Command succeeded: cd backend"
fi

echo "Running: uv sync"
uv sync
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv sync"
else
  echo "‚úÖ Command succeeded: uv sync"
fi

echo "Running: uv run python --version"
uv run python --version
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv run python --version"
else
  echo "‚úÖ Command succeeded: uv run python --version"
fi

echo "Verifying fix..."
if uv run python -c "import fastapi, uvicorn, anthropic; print('All imports successful')"; then
  echo "‚úÖ Fix Python Environment - VERIFIED"
else
  echo "‚ùå Fix Python Environment - VERIFICATION FAILED"
fi

echo "---"

echo "Step 7: Fix Application Import Issues"
echo "Description: Application code has import or initialization errors"

echo "Running: cd backend"
cd backend
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: cd backend"
else
  echo "‚úÖ Command succeeded: cd backend"
fi

echo "Running: uv run python -m py_compile app.py"
uv run python -m py_compile app.py
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv run python -m py_compile app.py"
else
  echo "‚úÖ Command succeeded: uv run python -m py_compile app.py"
fi

echo "Running: uv add fastapi uvicorn anthropic chromadb sentence-transformers"
uv add fastapi uvicorn anthropic chromadb sentence-transformers
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv add fastapi uvicorn anthropic chromadb sentence-transformers"
else
  echo "‚úÖ Command succeeded: uv add fastapi uvicorn anthropic chromadb sentence-transformers"
fi

echo "Running: uv run python -c "import app; print('App imports OK')""
uv run python -c "import app; print('App imports OK')"
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  Command failed: uv run python -c "import app; print('App imports OK')""
else
  echo "‚úÖ Command succeeded: uv run python -c "import app; print('App imports OK')""
fi

echo "Verifying fix..."
if uv run python -c "import app; print(type(app.app))"; then
  echo "‚úÖ Fix Application Import Issues - VERIFIED"
else
  echo "‚ùå Fix Application Import Issues - VERIFICATION FAILED"
fi

echo "---"

echo "üéâ Automated fixes completed!"
echo "Please run the diagnostics again to verify all issues are resolved."